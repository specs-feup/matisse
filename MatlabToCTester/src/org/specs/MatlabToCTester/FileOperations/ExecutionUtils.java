/**
 * Copyright 2012 SPeCS Research Group.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License. under the License.
 */

package org.specs.MatlabToCTester.FileOperations;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.specs.JMatIOPlus.MatFile;
import org.specs.MatlabToCTester.Auxiliary.OutputFolders;
import org.specs.MatlabToCTester.Outputs.OutputVariable;
import org.specs.MatlabToCTester.Outputs.TestCaseOutput;
import org.specs.MatlabToCTester.Outputs.TestOutput;
import org.suikasoft.jOptions.Interfaces.DataStore;

import pt.up.fe.specs.lang.SpecsPlatforms;
import pt.up.fe.specs.util.SpecsFactory;
import pt.up.fe.specs.util.SpecsIo;
import pt.up.fe.specs.util.SpecsLogs;
import pt.up.fe.specs.util.SpecsSystem;
import pt.up.fe.specs.util.system.ProcessOutputAsString;

/**
 * Utility methods related to running programs and saving data from executables.
 * 
 * @author Joao Bispo
 * 
 */
public class ExecutionUtils {

    private static final String FILENAME_OUTPUT_MAT = "cOutput.mat";

    public static String getFilenameOutputMat() {
        return ExecutionUtils.FILENAME_OUTPUT_MAT;
    }

    /**
     * Runs the binaries that are inside the executables directory and returns the output information.
     * 
     * @param setup
     * @param runOnlyOneTest
     * 
     * @param baseDirectory
     *            - the working directory
     * @param cExecutablesDirectory
     *            - the directory where the folders where the executable binaries can be found
     * @return a list of TestOuput
     */
    public static List<TestOutput> runBinaries(OutputFolders outputFolders, DataStore setup, String runOnlyOneTest,
            boolean checkReturnCode) {

        // The outputs generated by the binaries execution (runBinaries())
        List<TestOutput> outputs = SpecsFactory.newArrayList();

        // Iterate all the binaries folder
        List<File> testsFolders = SpecsIo.getFolders(outputFolders.getcExecutablesFolder());

        for (File test : testsFolders) {
            String testName = test.getName();
            if (runOnlyOneTest != null && !runOnlyOneTest.equals(testName)) {
                SpecsLogs.msgInfo("Skipping execution of " + testName);
                continue;
            }

            // Get all the test cases folders of this test
            List<File> testCasesFolder = SpecsIo.getFolders(test);

            List<TestCaseOutput> testCaseOutputs = SpecsFactory.newArrayList();

            // Iterate over each test case and run the executable binary
            for (File testCase : testCasesFolder) {
                SpecsLogs.msgInfo(" - " + testName + "/" + testCase.getName());

                List<File> executableFiles = getExecutableFiles(testCase);
                if (executableFiles.isEmpty()) {
                    SpecsLogs.msgInfo(" -> Could not find executable for '" + testCase + "'.");
                    continue;
                }

                if (executableFiles.size() > 1) {
                    SpecsLogs.msgInfo(" -> More than one executable in folder. Don't know which to execute.");
                    continue;
                }

                // Get the first executable
                File executableBinary = executableFiles.get(0);

                List<String> command = new ArrayList<>();
                command.add(executableBinary.getAbsolutePath());

                ProcessOutputAsString processOutput = null;

                processOutput = SpecsSystem.runProcess(command, executableBinary.getParentFile(), true, false);

                TestCaseOutput testCaseOutput = null;
                try {
                    testCaseOutput = TestCaseOutput.readTestCaseOutput(testCase.getName(), processOutput, setup,
                            testCase);
                } catch (Exception e) {
                    SpecsLogs.msgInfo(" -> Could not parse the output of the binary '"
                            + executableBinary.getAbsolutePath()
                            + "\n    This could be due to generation of incorrect C code.");
                    SpecsLogs.warn("Exception: " + e.getMessage(), e);
                    continue;
                }

                if (checkReturnCode && processOutput.getReturnValue() != 0) {
                    SpecsLogs.msgInfo(" -> Process exited with error code: " + processOutput.getReturnValue());
                    continue;
                }

                // Add test case, if could be calculated
                testCaseOutputs.add(testCaseOutput);
            }

            TestOutput testOutput = new TestOutput(testName, testCaseOutputs);
            outputs.add(testOutput);
        }

        return outputs;
    }

    private static List<File> getExecutableFiles(File testCase) {
        if (SpecsPlatforms.isWindows()) {
            return SpecsIo.getFiles(testCase, "exe");
        }

        return SpecsIo.getFiles(testCase)
                .stream()
                .filter(file -> !file.getName().contains("."))
                .collect(Collectors.toList());
    }

    /**
     * Given a list of outputs for the different function tests and a directory to save these outputs, saves them as
     * matlab data files (.mat).
     * 
     * @param outputs
     *            - the list of TestOutput instance with the output information
     * @param cOutputsDirectory
     *            - the directory where the matlab data files will be saved
     */
    public static void writeCOutputs(List<TestOutput> executedBinaries, OutputFolders outputFolders) {

        // Iterate all the tests
        for (TestOutput testOutput : executedBinaries) {

            String testName = testOutput.getTestName();

            // Iterate all the test cases
            List<TestCaseOutput> testCaseOutputs = testOutput.getTestCaseOutputs();
            for (TestCaseOutput testCaseOutput : testCaseOutputs) {

                String testCaseName = testCaseOutput.getInputName();

                // Create the folder to save the matlab data file and clean it
                File saveDirectory = new File(outputFolders.getcOutputsFolder(), testName);
                saveDirectory = new File(saveDirectory, testCaseName);
                saveDirectory = SpecsIo.mkdir(saveDirectory);
                SpecsIo.deleteFolderContents(saveDirectory);

                // Create the file
                File outputFile = new File(saveDirectory.getPath(), ExecutionUtils.FILENAME_OUTPUT_MAT);
                MatFile matFile = new MatFile(outputFile);

                // Iterate all the output variables
                for (OutputVariable outputVariable : testCaseOutput.getOutputVariables()) {
                    matFile.addVariable(outputVariable.toMLArray());
                }

                // Write the matlab data file
                matFile.write();
            }
        }
    }

    /**
     * Runs the main script that will call every other script that we need to run.
     * 
     * @param scriptName
     * 
     * @param matlabScriptsDirectory
     *            - the directory where the scripts are
     */
    public static void runMatlabScript(File matlabScriptsFolder, String scriptName) {

        List<String> command = new ArrayList<>();
        command.add("matlab");
        command.add("-logfile");
        command.add("matlab.log");
        command.add("-nosplash");
        command.add("-nodesktop");
        command.add("-r");
        // command.add("-wait");

        // command.add(MatlabToCTesterUtils.getNameMainMatlabScript());
        // Call function with a ';' in the end, so it does not print the result
        command.add("\"" + scriptName + ";\"");

        // To run octave we also need to add ".m" to the last command
        // command.add("octave");
        // command.add("-q");

        SpecsSystem.run(command, matlabScriptsFolder);

    }
}
