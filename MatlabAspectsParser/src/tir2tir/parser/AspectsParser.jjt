options{}PARSER_BEGIN(AspectsParser)package tir2tir.parser;public class AspectsParser{  public static void main(String args [])  {    AspectsParser parser = new AspectsParser(System.in);    try    {      SimpleNode tree = parser.Start();      //System.out.println("tir2tir: Aspects file parsed successfully.");
      //System.out.println("Parse Tree:");
      tree.dump("");    }    catch (ParseException e)    {      System.out.println("tir2tir: Encountered errors during parse.");      e.printStackTrace();    }  }}PARSER_END(AspectsParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < SCOPE : "scope" >| < INT : "int" >| < INT8 : "int8" >| < UINT8 : "uint8" >| < INT16 : "int16" >| < UINT16 : "uint16" >| < INT32 : "int32" >| < UINT32 : "uint32" >| < INT64 : "int64" >| < UINT64 : "uint64" >| < SINGLE : "single" >| < DOUBLE : "double" >| < STRING_TYPE : "string" >| < FLOAT : "float" >| < MULTI : "multi" >| < FIXED : "fixed" >| < UFIXED : "ufixed" >| < DEFINE : "#define" >| < FUNCTION : "function" >//| < DEFAULT_REAL : "default_real">}TOKEN :{  //    <UNBOUND_ARRAY_DIM: <INTEGER> "*" > |
/*  < ARRAY_SHAPE : ("[" < INTEGER >  "]")+ >| < ARRAY_UNDEFINED : ("[" "]")+ >*///  < ARRAY_DIM : ("[" < INTEGER >  "]") >//| < ARRAY_DIM_UNDEFINED : ("[" "]") >/*| < VECTOR_DIM :    (      (        < INTEGER >      | < STAR >      )      "x"      (        < INTEGER >      | < STAR >      )    ) >    *//*| < #STAR : "*" > */ < UNDEFINED_SHAPE : "[]*" >| < SHAPE : (("[" < INTEGER >  "]") |  ("[" "]"))+ >| < UNDEFINED_CELL_SHAPE : "{}*" >}TOKEN :{  < COLON : ":" >| < IDENTIFIER : ([ "A"-"Z", "a"-"z" ]) ([ "0"-"9", "A"-"Z", "a"-"z", "_" ])* >| < INTEGER : ([ "0"-"9" ])+ >| < STRING :    "\""    (      ~[ "\"", "\\", "\n", "\r" ]    | "\\"      (        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]      | [ "0"-"7" ] ([ "0"-"7" ])?      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]      |        (          [ "\n", "\r" ]        | "\r\n"        )      )    )*    "\"" >}SimpleNode Start() :{}{  [ Definitions() ]  (    Scope()  )+  {    return jjtThis;  }}void Definitions() :{}{  (    Define()  )+}void Define() :{  Token t;}{  < DEFINE > t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }  DataType()}void Scope() :{  Token t;}{  < SCOPE >  (    t = < IDENTIFIER >    {      jjtThis.jjtSetValue(t.image);    }    "{" AspectList() "}"  | t = < FUNCTION >    {      jjtThis.jjtSetValue(t.image);    }    "{" AspectFunctionList() "}"  )}void AspectList() :{}{  (    DataTypeAspect()  | Scope()  )* //por enquanto
}void AspectFunctionList() :{}{  (    FunctionTypeAspect()  | Scope()  )* //por enquanto}void DataTypeAspect() :{}{  Variable() < COLON >  (//    [ Function() ]    (      DataType()    | DefinedBy()    )  )  [ LabelBoundary() ]}/** * Always has: * - Variable, with the name * - DataTypeList, with the types associated with this name * - DataType, for the return of the function */void FunctionTypeAspect() :{}{  Variable() DataTypeList() < COLON >  (//    [ Function() ]    (      DataType()   // | DefinedBy()    )  )  [ LabelBoundary() ]}void DataTypeList() :{}{  "(" [DataType() ("," DataType())* ]")"}void Function() :{}{  < FUNCTION >}void LabelBoundary() :{}{  < COLON > "[" Label() Label() "]"}void DefinedBy() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}SimpleNode DataType() :{  Token t;}{  //UnboundedArrayDim()
  //[DataTypeMulti() | DataTypeDimXDim() | ArrayShape()]
  [    DataTypeMulti()  //| DataTypeDimXDim()  ]  (    (      t = < INT >    | t = < INT8 >    | t = < UINT8 >    | t = < INT16 >    | t = < UINT16 >    | t = < INT32 >    | t = < UINT32 >    | t = < INT64 >    | t = < UINT64 >    | t = < DOUBLE >    | t = < STRING_TYPE >    | t = < SINGLE >    | t = < FLOAT >    )  |    (      t = < FIXED >    | t = < UFIXED >    )    DataTypeQuantizer()  )  [    Shape()  | UndefinedShape()//    ArrayShape()//  | ArrayUndefined()  ]  [    UndefinedCellShape()  ]    {    jjtThis.jjtSetValue(t.image);    return jjtThis;  }}/*void DataTypeDimXDim() :{  Token t;}{  t = < VECTOR_DIM >  {    jjtThis.jjtSetValue(t.image);  }}*//*
void UnboundedArrayDim() : {Token t;}
{
	t=<UNBOUND_ARRAY_DIM> {jjtThis.jjtSetValue(t.image);}
}
*/void Shape() :{  Token t;}{  t = < SHAPE >  {    jjtThis.jjtSetValue(t.image);  }}void UndefinedShape() :{  Token t;}{  t = < UNDEFINED_SHAPE >  {    jjtThis.jjtSetValue(t.image);  }}void UndefinedCellShape() :{  Token t;}{  t = < UNDEFINED_CELL_SHAPE >  {    jjtThis.jjtSetValue(t.image);  }}/*void ArrayShape() :{  Token t;}{  t = < ARRAY_SHAPE >  {    jjtThis.jjtSetValue(t.image);  }}void ArrayUndefined() :{  Token t;}{  t = < ARRAY_UNDEFINED >  {    jjtThis.jjtSetValue(t.image);  }}*/void DataTypeMulti() :{}{  < MULTI >}void DataTypeQuantizer() :{}{  "(" Integer() "," Integer() ")" [ "[" PropertiesList() "]" ]}void PropertiesList() :{}{  PropertiesSet()  (    "," PropertiesSet()  )*}void PropertiesSet() :{  Token t;}{  (t = < IDENTIFIER >) "=" String()  {    jjtThis.jjtSetValue(t.image);  }}void Variable() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}void Mode() :{  Token t;}{  (    t = < FIXED >  | t = < UFIXED >  )  {    jjtThis.jjtSetValue(t.image);  }}void Integer() :{  Token t;}{  t = < INTEGER >  {    jjtThis.jjtSetValue(t.image);  }}void Label() :{  Token t;}{  t = < IDENTIFIER >  {    jjtThis.jjtSetValue(t.image);  }}void String() :{  Token t;}{  t = < STRING >  {    jjtThis.jjtSetValue(t.image);  }}
