block #0:
  $A = arg 0
  $B = arg 1
  $C = arg 2
  $x1 = arg 3
  $x2 = arg 4
  % $D = range_get $A, $B, $C, $x1:$x2, :
  $one$1 = 1
  $A_end0$1 = end $A, 0, 4
  $le_result$1 = call le [LogicalType] $B, $A_end0$1
  validate_true $le_result$1
  $C_numel$1 = call numel [INT] $C
  $C_flat$1 = vertical_flatten $C
  $max_index$1 = call matisse_max_or_zero [INT] $C_flat$1
  $A_end1$1 = end $A, 1, 4
  $le_result$2 = call le [LogicalType] $max_index$1, $A_end1$1
  validate_true $le_result$2
  $range_diff$1 = call minus [INT] $x2, $x1
  $range_size$1 = call plus [INT] $range_diff$1, $one$1
  $A_end2$1 = end $A, 2, 4
  $le_result$3 = call le [LogicalType] $x2, $A_end2$1
  validate_true $le_result$3
  $A_end$1 = end $A, 3, 4
  $D$1 = call matisse_new_array_from_dims [DynamicMatrixType(INT, shape=[Matrix Shape: [1, -1, -1, -1], Dims: 4])] $one$1, $C_numel$1, $range_size$1, $A_end$1
  for $one$1, $one$1, $A_end$1, #1, #2
block #1:
  $D$2 = phi #0:$D$1, #4:$D$5
  $iter$1 = iter
  for $one$1, $one$1, $range_size$1, #3, #4
block #2:
  $D$3 = phi #0:$D$1, #4:$D$5
  $D = $D$3
block #3:
  $D$4 = phi #1:$D$2, #6:$D$7
  $iter$2 = iter
  $plus_result$1 = call plus [INT] $iter$2, $x1
  $A_index$1 = call minus [INT] $plus_result$1, $one$1
  for $one$1, $one$1, $C_numel$1, #5, #6
block #4:
  $D$5 = phi #1:$D$2, #6:$D$7
block #5:
  $D$6 = phi #3:$D$4, #5:$D$8
  $iter$3 = iter
  $C_value$1 = simple_get $C, $iter$3
  $A_value$1 = simple_get $A, $B, $C_value$1, $A_index$1, $iter$1
  $D$8 = simple_set $D$6, $one$1, $iter$3, $iter$2, $iter$1, $A_value$1
block #6:
  $D$7 = phi #3:$D$4, #5:$D$8